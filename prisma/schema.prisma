// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(uuid())
  email                  String    @unique
  passwordHash           String
  name                   String
  avatarUrl              String?
  birthday               DateTime?
  anniversaries          Anniversary[]
  externalWishlistUrls   String[]
  wishlist               Wishlist?
  wishlistLinks          WishlistLink[]
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model Anniversary {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  label      String
  date       DateTime
  isPrimary  Boolean  @default(false)
}

model Wishlist {
  id         String         @id @default(uuid())
  user       User           @relation(fields: [userId], references: [id])
  userId     String         @unique
  items      WishlistItem[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model WishlistItem {
  id           String    @id @default(uuid())
  wishlist     Wishlist  @relation(fields: [wishlistId], references: [id])
  wishlistId   String
  title        String
  description  String?
  imageUrl     String?
  productUrl   String
  isReserved   Boolean   @default(false)
  reservedBy   String?   // refers to User.id
  reservedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model WishlistLink {
  id          String   @id @default(cuid())
  label       String
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}
